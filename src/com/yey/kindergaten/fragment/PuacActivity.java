package com.yey.kindergaten.fragment;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.TextView;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.db.sqlite.WhereBuilder;import com.lidroid.xutils.exception.DbException;import com.lidroid.xutils.view.annotation.ViewInject;import com.yey.kindergaten.AppContext;import com.yey.kindergaten.BaseActivity;import com.yey.kindergaten.R;import com.yey.kindergaten.activity.ContactsAddFriendActivity;import com.yey.kindergaten.activity.ContactsPuacDatacardActivity;import com.yey.kindergaten.activity.PublicAccountMessageList;import com.yey.kindergaten.activity.WizardActivity;import com.yey.kindergaten.adapter.ContactPuacAdapter;import com.yey.kindergaten.adapter.ContactPuacAdapter.PuacOnclickback;import com.yey.kindergaten.bean.AccountInfo;import com.yey.kindergaten.bean.Contacts;import com.yey.kindergaten.bean.Msgtypes;import com.yey.kindergaten.bean.PublicAccount;import com.yey.kindergaten.db.DbHelper;import com.yey.kindergaten.net.AppServer;import com.yey.kindergaten.net.OnAppRequestListener;import com.yey.kindergaten.receive.AppEvent;import com.yey.kindergaten.util.AppConstants;import com.yey.kindergaten.util.Session;import com.yey.kindergaten.util.SharedPreferencesHelper;import com.yey.kindergaten.widget.MyListViewWithScrollView;import com.yey.kindergaten.widget.PullToRefreshHeaderView;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import de.greenrobot.event.EventBus;public class PuacActivity extends BaseActivity implements OnClickListener, PuacOnclickback, PullToRefreshHeaderView.OnHeaderRefreshListener {    MyListViewWithScrollView listview1;    MyListViewWithScrollView listview2;    ContactPuacAdapter contactPuacAdapetr1;    ContactPuacAdapter contactPuacAdapetr2;    List<PublicAccount> datalist1 = new ArrayList<PublicAccount>();    List<PublicAccount> datalist2 = new ArrayList<PublicAccount>();    AccountInfo accountInfo;    Contacts contacts;    int state1[];    int state2[];    @ViewInject(R.id.header_title) TextView tv_title;    @ViewInject(R.id.left_btn)ImageView left_btn;    @ViewInject(R.id.pull_torefresh_contact)PullToRefreshHeaderView mPullToRefreshView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.pub_account_fragment);        ViewUtils.inject(this);        tv_title.setText("公众号");        left_btn.setVisibility(View.VISIBLE);        left_btn.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                PuacActivity.this.finish();            }        });        listview1 = (MyListViewWithScrollView)findViewById(R.id.publicaccount_listview1);        listview2 = (MyListViewWithScrollView)findViewById(R.id.publicaccount_listview2);        mPullToRefreshView.setOnHeaderRefreshListener(this);        if (!EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().register(this);        }        accountInfo = AppServer.getInstance().getAccountInfo();        contacts = AppContext.getInstance().getContacts();        datalist1 = getItemPublic(1);        datalist2 = getItemPublic(2);        if (datalist1!=null && datalist1.size() > 0) {            contactPuacAdapetr1 = new ContactPuacAdapter(PuacActivity.this, datalist1, AppConstants.CONTACTS_PUACMAIN1, state1);            listview1.setAdapter(contactPuacAdapetr1);//            contactPuacAdapetr1.setPuacOnclickback(this);        }        if (datalist2!=null && datalist2.size() > 0) {            contactPuacAdapetr2 = new ContactPuacAdapter(PuacActivity.this, datalist2, AppConstants.CONTACTS_PUACMAIN2, state2);            listview2.setAdapter(contactPuacAdapetr2);            contactPuacAdapetr2.setPuacOnclickback(this);        }        listview1.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (position == 0) {                    return;                }                PublicAccount publicAccount = datalist1.get(position);                PublicAccount account = null;                if (publicAccount == null) {                    return;                }                try {                    account = DbHelper.getDB(AppContext.getInstance()).findFirst(PublicAccount.class, WhereBuilder.b("publicid", "=", publicAccount.getPublicid()));                } catch (DbException e) {                    e.printStackTrace();                }                String intent_title = publicAccount.getNickname();                Bundle bundle = new Bundle();                Session session = Session.getSession();                if (account!=null) {                    // 获取标题，传递到子页面                    if (account.getIsfirstlook() == AppConstants.IS_FIRST_LOOK) { // 表示第一次进入公众号列表                        session.put(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                        session.put(AppConstants.INTENT_KEY_TYPEID, publicAccount.getPmtype() == -1 ? -1 : publicAccount.getPmtype());                        session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                        bundle.putString(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                        bundle.putString(AppConstants.INTENT_KEY_TITLE, intent_title); // 保持子页面标题一致                        bundle.putString(AppConstants.INTENT_IS_SHOWLOOKDATA, "false"); // 二级分类的公众号不显示查看详情                        Intent intent = new Intent(PuacActivity.this, PublicAccountMessageList.class);                        intent.putExtras(bundle);                        startActivity(intent);                    } else { // 不是第一次进入公众号                        session.put(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                        session.put(AppConstants.INTENT_KEY_TYPEID, publicAccount.getPmtype() == -1 ? -1 : publicAccount.getPmtype());                        session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                        bundle.putString(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                        bundle.putString(AppConstants.INTENT_KEY_TITLE, intent_title); // 保持子页面标题一致                        bundle.putString(AppConstants.INTENT_IS_SHOWLOOKDATA, "false"); // 二级分类的公众号不显示查看详情                        Intent intent = new Intent(PuacActivity.this, PublicAccountMessageList.class);                        intent.putExtras(bundle);                        startActivity(intent);                    }                } else {                    session.put(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                    session.put(AppConstants.INTENT_KEY_TYPEID, publicAccount.getPmtype() == -1 ? -1 : publicAccount.getPmtype());                    session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                    bundle.putString(AppConstants.INTENT_KEY_FROMID, account.getPublicid() + "");                    Intent intent = new Intent(PuacActivity.this, PublicAccountMessageList.class);                    intent.putExtras(bundle);                    startActivity(intent);                }            }        });        listview2.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (position == 0) {                    return;                }                PublicAccount publicAccount = datalist2.get(position);                Session session = Session.getSession();                if (publicAccount.getSubscription() == 1) {                    if (check(publicAccount, session, position)) {                        session.put(AppConstants.INTENT_KEY_FROMID, publicAccount.getPublicid() + "");                        session.put("state", AppConstants.PUACFRAGMENT_LOOKPUAC);                        session.put(AppConstants.INTENT_KEY_TYPEID, -1);                        Intent intent = new Intent(PuacActivity.this, PublicAccountMessageList.class);                        startActivity(intent);                    }                } else if (publicAccount.getSubscription() == -1) { // 表示订阅失败                    if (check(publicAccount,session,position)) {                        session.put(AppConstants.INTENT_KEY_FROMID, publicAccount.getPublicid() + "");                        session.put("state", AppConstants.PUACFRAGMENT_SPECIALPUAC);                        Intent intent = new Intent(PuacActivity.this, PublicAccountMessageList.class);                        startActivity(intent);                    }                } else {                    if (check(publicAccount,session,position)) {                        Intent intent = new Intent(PuacActivity.this, ContactsPuacDatacardActivity.class);                        Bundle bundle = new Bundle();                        bundle.putString("state", AppConstants.PUACFRAGMENT_BOOKPUAC);                        bundle.putInt("role", 2);                        bundle.putInt(AppConstants.INTENT_KEY_TYPEID, -1);                        bundle.putInt("publicid", publicAccount.getPublicid());                        intent.putExtras(bundle);                        startActivity(intent);                    }                }            }        });    }    /**     * 从contacts中组装数据     *     * @param item     * @return     */    private List<PublicAccount> getItemPublic(int item) {        contacts = AppContext.getInstance().getContacts();        List<PublicAccount> publicAccounts = contacts.getPublics();        if (item == 1) { // 幼儿园            List<PublicAccount> newPublicAccounts1 = new ArrayList<PublicAccount>();            if (publicAccounts!=null) {                                     // 源数据contacts.getPublics()                int kindergartenpucid = 0;      // (幼儿园)公众号id                // 1、获取(幼儿园)时光树公众号id                for (int i = 0; i < publicAccounts.size(); i++) {                    if (publicAccounts.get(i).getPublicid() == 16 || publicAccounts.get(i).getPublicid() == 17 || publicAccounts.get(i).getPublicid() == 18) {                        kindergartenpucid = publicAccounts.get(i).getPublicid();                    }                }                // 2、如果有(幼儿园)时光树公众号则添加数据                if (kindergartenpucid!=0) {                    List<Msgtypes> msgtypes = new ArrayList<Msgtypes>();                    try {                        msgtypes = DbHelper.getDB(AppContext.getInstance()).findAll(Msgtypes.class, WhereBuilder.b("publicid", "=", kindergartenpucid));                    } catch (DbException e) {                        e.printStackTrace();                    }                    if (msgtypes!=null && msgtypes.size() > 0) {                        newPublicAccounts1.add(new PublicAccount(0, 0, "", "幼儿园", "", 1)); // 添加幼儿园                        for (int m = 0; m < msgtypes.size(); m++) {                            newPublicAccounts1.add(new PublicAccount(msgtypes.get(m).getPublicid(), msgtypes.get(m).getTypeid(), msgtypes.get(m).getDesc(), msgtypes.get(m).getTypename(), msgtypes.get(m).getAvatar(), 1)); // 添加二级分类                        }                    }                }            }            return newPublicAccounts1;        } else if (item == 2) { // 公众号            List<PublicAccount> newPublicAccounts2 = new ArrayList<PublicAccount>();            if (publicAccounts!=null) {                                     // 源数据contacts.getPublics()                // 1、去除(幼儿园)时光树公众号                for (int i = 0; i < publicAccounts.size(); i++) {                    if (publicAccounts.get(i).getPublicid()!=16 && publicAccounts.get(i).getPublicid()!=17 && publicAccounts.get(i).getPublicid()!=18) {                        newPublicAccounts2.add(publicAccounts.get(i));                    }                }                // 2、按订阅、未订阅排序                List<PublicAccount> havebooklist = new ArrayList<PublicAccount>();                List<PublicAccount> nobooklist = new ArrayList<PublicAccount>();                for (int i = 0; i < newPublicAccounts2.size(); i++) {                    PublicAccount puac = newPublicAccounts2.get(i);                    if (puac.getSubscription() == 1) {                        havebooklist.add(puac);                    } else {                        nobooklist.add(puac);                    }                }                newPublicAccounts2.clear();                // 3、添加公众号item                newPublicAccounts2.add(new PublicAccount(0, 0, "", "公众号", "", 1));      // 添加幼儿园                newPublicAccounts2.addAll(havebooklist);                newPublicAccounts2.addAll(nobooklist);                // 4、添加是否订阅信息                state2 = null;                state2 = new int[newPublicAccounts2.size()];                for (int i = 0; i < newPublicAccounts2.size(); i++) {                    PublicAccount puac = newPublicAccounts2.get(i);                    if (puac.getSubscription() == 1) {                        state2[i] = 1;                    } else {                        state2[i] = 0;                    }                }            }            return newPublicAccounts2;        }        return new ArrayList<PublicAccount>();    }    /**     * 检查是不是家长，汇园长汇，老师汇并且从未点过     *     * @param publicAccount     * @param session     * @param position     * @return     */    public boolean check(PublicAccount publicAccount, Session session, int position) {        PublicAccount account = null;        String isFirstLook = SharedPreferencesHelper.getInstance(AppContext.getInstance()).getString(AppConstants.TIMETREE_IS_FIRSTLOGIN, "0");        boolean isCheck = false;        try {            account = DbHelper.getDB(AppContext.getInstance()).findFirst(PublicAccount.class, WhereBuilder.b("publicid", "=", publicAccount.getPublicid()));        } catch (DbException e) {            e.printStackTrace();        }        if (account!=null) {            if(Arrays.asList(AppConstants.TIMEREE_GUIDE_IDS).contains(publicAccount.getPublicid()) && !isFirstLook.contains(accountInfo.getUid() + "")) {                if (account.getIsfirstlook() == AppConstants.IS_FIRST_LOOK) {                    showWhatPage(publicAccount.getPublicid(),publicAccount);                } else {                    // 进入公众号列表                    PublicAccount puac = datalist2.get(position);                    session.put(AppConstants.INTENT_KEY_FROMID, puac.getPublicid() + "");                    session.put("state", AppConstants.PUACFRAGMENT_LOOKPUAC);                    session.put(AppConstants.INTENT_KEY_TYPEID, -1);                    Intent intent = new Intent(PuacActivity.this,PublicAccountMessageList.class);                    startActivity(intent);                }                return false;            } else if (Arrays.asList(AppConstants.TIMEREE_GUIDE_IDS).contains(publicAccount.getPublicid())&&isFirstLook.contains(accountInfo.getUid() + "")){                // 进入公众号列表                PublicAccount puac = datalist2.get(position);                session.put(AppConstants.INTENT_KEY_FROMID, puac.getPublicid() + "");                session.put("state", AppConstants.PUACFRAGMENT_LOOKPUAC);                session.put(AppConstants.INTENT_KEY_TYPEID, -1);                Intent intent = new Intent(PuacActivity.this,PublicAccountMessageList.class);                startActivity(intent);                return false;            }            if (account.getIsfirstlook() == AppConstants.IS_FIRST_LOOK) {                if (Arrays.asList(AppConstants.PUBLIC_GUIDE_IDS).contains(publicAccount.getPublicid() + "")) { // 首页消息的message.getFromID就是公众号的publicId                    showWhatPage(publicAccount.getPublicid(), publicAccount);                } else {                    // 进入公众号列表                    PublicAccount puac = datalist2.get(position);                    session.put(AppConstants.INTENT_KEY_FROMID, puac.getPublicid() + "");                    session.put("state", AppConstants.PUACFRAGMENT_LOOKPUAC);                    session.put(AppConstants.INTENT_KEY_TYPEID, -1);                    Intent intent = new Intent(PuacActivity.this,PublicAccountMessageList.class);                    startActivity(intent);                }            } else {                // 进入公众号列表                isCheck = true;            }        } else {            isCheck = true;        }        return isCheck;    }    public void showWhatPage(int fromId, PublicAccount puac){        Intent intent = new Intent(PuacActivity.this, WizardActivity.class);        Bundle bundle = new Bundle();        bundle.putSerializable("puac", puac);        intent.putExtra("type", "fromPuaFragment");        switch (fromId){            case AppConstants.TIMETREE_DO_DIRECTOR:                intent.putExtra("fromdId", AppConstants.TIMETREE_DO_DIRECTOR);                break;            case AppConstants.TIMETREE_DO_TEACHER:                intent.putExtra("fromdId", AppConstants.TIMETREE_DO_TEACHER);                break;            case AppConstants.TIMETREE_DO_PARENT:                intent.putExtra("fromdId", AppConstants.TIMETREE_DO_PARENT);                break;            case AppConstants.TIMETREE_DIRECTOR_PUBLIC:                intent.putExtra("fromdId", AppConstants.TIMETREE_DIRECTOR_PUBLIC);                break;            case AppConstants.TIMETREE_TEACHER_PUBLIC:                intent.putExtra("fromdId", AppConstants.TIMETREE_TEACHER_PUBLIC);                break;            case AppConstants.TIMETREE_PARENT_PUBLIC:                intent.putExtra("fromdId", AppConstants.TIMETREE_PARENT_PUBLIC);                break;        }        intent.putExtras(bundle);        startActivity(intent);    }    @Override    public void onResume() {        refreshFrament();        super.onResume();    }    public void refreshFrament() {        datalist1 = getItemPublic(1);        datalist2 = getItemPublic(2);        contactPuacAdapetr1 = new ContactPuacAdapter(AppContext.getInstance(), datalist1, AppConstants.CONTACTS_PUACMAIN1, state1);        contactPuacAdapetr2 = new ContactPuacAdapter(AppContext.getInstance(), datalist2, AppConstants.CONTACTS_PUACMAIN2, state2);        if (listview1 != null) {            listview1.setAdapter(contactPuacAdapetr1);        }        if (listview2 != null) {            listview2.setAdapter(contactPuacAdapetr2);        }        contactPuacAdapetr2.setPuacOnclickback(this);    }    @Override    public void onClick(View v) {        switch (v.getId()) {        case R.id.fragmnetly_notitaddly:            Intent intent = new Intent(PuacActivity.this, ContactsAddFriendActivity.class);            startActivity(intent);            break;        }    }    public void onEventMainThread(AppEvent event) {        if (event.getType() == AppEvent.PUBLICFRAGMENT) {            refreshFrament();        }    }    @Override    public void puacClick(int id, final int position, int type) {        if (type == 1) {            if (datalist2.get(position).getFixed() == 1) {                return ;            }            new AlertDialog.Builder(PuacActivity.this).setTitle("是否取消订阅").setPositiveButton("是", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    AppServer.getInstance().bookPublicAccount(accountInfo.getUid(), datalist2.get(position).getPublicid(), 0, new OnAppRequestListener(){                        @Override                        public void onAppRequest(int code, String message, Object obj) {                            try {                                if (code == 0) {                                    showToast("已经成功取消订阅");                                    upSubscription2(position, 0);                                    datalist2 = getItemPublic(2);                                    contactPuacAdapetr2 = new ContactPuacAdapter(PuacActivity.this, datalist2, AppConstants.CONTACTS_PUACMAIN2, state2);                                    listview2.setAdapter(contactPuacAdapetr2);                                    contactPuacAdapetr2.setPuacOnclickback(PuacActivity.this);                                } else {                                    showToast("操作失败");                                }                            } catch (DbException e) {                                e.printStackTrace();                            }                        }                    });                }            }).setNegativeButton("否", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) { }            }).show();        } else {            AppServer.getInstance().bookPublicAccount(accountInfo.getUid(), datalist2.get(position).getPublicid(), 1, new OnAppRequestListener(){                @Override                public void onAppRequest(int code, String message, Object obj) {                    if (code == 0) {                        try {                            showToast("订阅成功");                            upSubscription2(position, 1);                            datalist2 = getItemPublic(2);                            contactPuacAdapetr2 = new ContactPuacAdapter(PuacActivity.this, datalist2, AppConstants.CONTACTS_PUACMAIN2, state2);                            listview2.setAdapter(contactPuacAdapetr2);                            contactPuacAdapetr2.setPuacOnclickback(PuacActivity.this);                        } catch (DbException e) {                            e.printStackTrace();                        }                    } else {                         showToast("操作失败");                    }                }            });        }    }    /**     * 更新订阅状态（排序）     *     * @param position 下标     * @param subscription 1:已订阅; 0:未订阅;     * @throws DbException     */    private void upSubscription(int position, int subscription) throws DbException {        Contacts newContacts = AppContext.getInstance().getContacts();        if (datalist2 == null || datalist2.size() == 0) {            return;        }        PublicAccount puac = datalist2.get(position);        puac.setSubscription(subscription);        DbHelper.getDB(this).update(puac, WhereBuilder.b("publicid", "=", datalist2.get(position).getPublicid()), "subscription");        datalist2.remove(position);        datalist2.remove(0);        List<PublicAccount> list = new ArrayList<PublicAccount>();        List<PublicAccount> publicAccounts = contacts.getPublics();        PublicAccount account = null;        for (int i = 0; i < publicAccounts.size(); i++) {            if (publicAccounts.get(i).getPublicid() == 16 || publicAccounts.get(i).getPublicid() == 17 || publicAccounts.get(i).getPublicid() == 18) {                account = publicAccounts.get(i);            }        }        if (subscription == 0) {   // 未订阅            list.addAll(datalist2);            list.add(puac);            if (account != null) {                list.add(account);            }        } else {            list.add(puac);            list.addAll(datalist2);            if (account!=null) {                list.add(account);            }        }        newContacts.setPublics(list);        AppContext.getInstance().setContacts(newContacts);    }    /**     * 更新订阅状态（不排序）     *     * @param position 下标     * @param subscription 1:已订阅; 0:未订阅;     * @throws DbException     */    private void upSubscription2(int position, int subscription) throws DbException {        Contacts newContacts = AppContext.getInstance().getContacts();        if (datalist2 == null || datalist2.size() == 0) {            return;        }        PublicAccount puac = datalist2.get(position);        puac.setSubscription(subscription);        DbHelper.getDB(this).update(puac, WhereBuilder.b("publicid", "=", datalist2.get(position).getPublicid()), "subscription");        datalist2.set(position, puac);        datalist2.remove(0);        newContacts.setPublics(datalist2);        AppContext.getInstance().setContacts(newContacts);    }    @Override    public void onHeaderRefresh(final PullToRefreshHeaderView view) {        AppServer.getInstance().getPublics(accountInfo.getUid(),new OnAppRequestListener() {            @Override            public void onAppRequest(int code, String message, Object obj) {                 view.onHeaderRefreshComplete();                refreshFrament();            }        });    }}