/** *  */package com.yey.kindergaten.fragment;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.speech.tts.TextToSpeech;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.AdapterView.OnItemLongClickListener;import android.widget.Button;import android.widget.ImageView;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.SimpleAdapter;import android.widget.TextView;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.db.sqlite.Selector;import com.lidroid.xutils.db.sqlite.WhereBuilder;import com.lidroid.xutils.exception.DbException;import com.lidroid.xutils.view.annotation.ViewInject;import com.yey.kindergaten.AppContext;import com.yey.kindergaten.AppManager;import com.yey.kindergaten.R;import com.yey.kindergaten.activity.CaptureActivity;import com.yey.kindergaten.activity.CommonBrowser;import com.yey.kindergaten.activity.ContactsAddFriendActivity;import com.yey.kindergaten.activity.ContactsFriendRequestActivity;import com.yey.kindergaten.activity.GrowthDiaryActivity;import com.yey.kindergaten.activity.Invite_select_Activity;import com.yey.kindergaten.activity.MeInfoActivity;import com.yey.kindergaten.activity.MediaPlayActivity;import com.yey.kindergaten.activity.PhotoShowGeneralActivity;import com.yey.kindergaten.activity.PublicAccountMessageList;import com.yey.kindergaten.activity.ServiceCreatKinderSelectActivity;import com.yey.kindergaten.activity.ServicePublishSpeakActivity;import com.yey.kindergaten.activity.ServiceScheduleWriteActivity;import com.yey.kindergaten.activity.ServiceTaskMainActivity;import com.yey.kindergaten.activity.WizardActivity;import com.yey.kindergaten.adapter.MessageRecentAdapter;import com.yey.kindergaten.bean.AccountInfo;import com.yey.kindergaten.bean.Chat;import com.yey.kindergaten.bean.Classe;import com.yey.kindergaten.bean.Contacts;import com.yey.kindergaten.bean.Friend;import com.yey.kindergaten.bean.MenuBean;import com.yey.kindergaten.bean.MessageNews;import com.yey.kindergaten.bean.MessagePublicAccount;import com.yey.kindergaten.bean.MessageRecent;import com.yey.kindergaten.bean.MessageSystems;import com.yey.kindergaten.bean.Msgtypes;import com.yey.kindergaten.bean.Parent;import com.yey.kindergaten.bean.PublicAccount;import com.yey.kindergaten.db.DbHelper;import com.yey.kindergaten.db.MessageDb;import com.yey.kindergaten.huanxin.Activity.ChatActivity2;import com.yey.kindergaten.inter.OnAooRequestParentListener;import com.yey.kindergaten.net.AppServer;import com.yey.kindergaten.net.OnAppRequestListener;import com.yey.kindergaten.receive.AppEvent;import com.yey.kindergaten.receive.PushReceiver;import com.yey.kindergaten.task.SimpleTask;import com.yey.kindergaten.util.AppConfig;import com.yey.kindergaten.util.AppConstants;import com.yey.kindergaten.util.AppUtils;import com.yey.kindergaten.util.HuanxinController;import com.yey.kindergaten.util.Session;import com.yey.kindergaten.util.SharedPreferencesHelper;import com.yey.kindergaten.util.StringUtils;import com.yey.kindergaten.util.Utils;import com.yey.kindergaten.util.UtilsLog;import com.yey.kindergaten.widget.PhotoDialog;import com.yey.kindergaten.widget.xlist.XListView;import com.yey.kindergaten.widget.xlist.XListView.IXListViewListener;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import de.greenrobot.event.EventBus;/** * @author chaowen * */public class HomeFragement extends FragmentBase implements Handler.Callback, IXListViewListener, OnClickListener, OnItemClickListener, OnItemLongClickListener{    @ViewInject(R.id.header_title)TextView tv_headerTitle ;    @ViewInject(R.id.right_btn)static ImageView iv_right;    @ViewInject(R.id.right_tv)TextView right_tv;    @ViewInject(R.id.menu_btn)static RelativeLayout rl_menu;//  @ViewInject(R.id.menu_btn_parent)static RelativeLayout rlMenuParent;//  @ViewInject(R.id.btn_top_barcode_iv)MyImageView btn_top_barcode;//  @ViewInject(R.id.btn_top_barcode_teacheriv)MyImageView barcode_teacher;//  @ViewInject(R.id.id_addfriend_tv_teacheriv)MyImageView addfriend_teacher;//  @ViewInject(R.id.id_sendspeak_tv_teacheriv)MyImageView sendspeak_teacher;//  @ViewInject(R.id.id_sendspeak_iv)MyImageView sendspeaktv;//  @ViewInject(R.id.id_writesc_iv)MyImageView writesctv;//  @ViewInject(R.id.id_addfriend_iv)MyImageView addfriendtv;//  @ViewInject(R.id.id_creategroup_iv)MyImageView creategroupTv;//  @ViewInject(R.id.id_sendmsg_iv)MyImageView sendmsg;    @ViewInject(R.id.network_listener_ll)RelativeLayout netCheckRL;    @ViewInject(R.id.network_listener_tv)TextView netCheckTv;    public static Boolean istop = true;    @ViewInject(R.id.lv_home_menu_unified_entrance)ListView unifiedLV;    public static boolean isback = true;    private static Animation pop_in;    private static Animation pop_out;    private MessageRecentAdapter messageRecentAdapter;    private AccountInfo accountinfo;    XListView messageLv = null;    List<MessageRecent> mdata = new ArrayList<MessageRecent>();    public static final int NEW_MESSAGE = 0x001; // 收到消息    private static int role = 0; // 1表示老师    public static int getNewFlag = 0;    private List<Parent>list;    NetWorkStateReceive mReceiver;    private boolean isFirstShow;    public static final String TAG = "HomeFragement";    public static boolean isloadContact = false;    // MSG处理    private static final int REFRESH_MSG = 1;    private int refreshCount = 0;    private static final int RELOAD_WAIT_MSG = 2;    private static final int RELOAD_WAIT_MSG_TIME = 500;    private static final int INIT_COUNT_MSG = 3;    private static final int INIT_COUNT_TIME = 1000;    private static final int FORCE_UPDATE_DIALOG_MSG = 4;    // 双击事件    private int count = 0;    private long firClick = 0;    private long secClick = 0;    private Handler mhandler = new Handler(this);    TextToSpeech tts; // 语音播报    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        UtilsLog.i(TAG, "into onCreateView");        View view = inflater.inflate(R.layout.activity_home_main, container, false);        ViewUtils.inject(this, view);        mReceiver = new NetWorkStateReceive();        IntentFilter mFilter = new IntentFilter();        mFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);        this.getActivity().registerReceiver(mReceiver, mFilter);        accountinfo = AppServer.getInstance().getAccountInfo();        netCheckRL.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                Intent wifiSettingsIntent = new Intent("android.settings.WIFI_SETTINGS");                startActivity(wifiSettingsIntent);                UtilsLog.i(TAG, "wifiSettingIntent to settings.WIFI_SETTINGS");            }        });        /**         * 在chatActivity2中写接口，在homefragment中用chatAcivity中调用         */        return view;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        UtilsLog.i(TAG, "into onActivityCreated");        List<PublicAccount>publicAccountList = null;        initView();        // 由于首页加载方式改变，增加加载保护，防止进入通讯录时contacts还未加载完毕。        if (accountinfo.getKid() == 0 || accountinfo.getCid() == 0) {            initRecentData();            // prepareData();            try {                getNewMessage();                ParentGetMessage();            } catch (NullPointerException e){                e.printStackTrace();                UtilsLog.i(TAG, "getNewMessage, TeacherGetMessage NullPointerException");            }        } else {            if (Utils.isContactsNull(appcontext, accountinfo.getRole())) {                showLoadingDialog("正在加载,请稍后...");                mhandler.sendEmptyMessageDelayed(REFRESH_MSG,RELOAD_WAIT_MSG_TIME);            } else {                initRecentData();                // prepareData();                try {                    getNewMessage();                    ParentGetMessage();                } catch (NullPointerException e) {                    e.printStackTrace();                    UtilsLog.i(TAG, "getNewMessage, TeacherGetMessage NullPointerException");                }            }        }        if (!EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().register(this); // 7- 27 龙衡东修改 BaseActivity已注册        }    }    private void initView() {        tts = new TextToSpeech(this.getActivity(), listener, null);//      tv_headerTitle.setText(R.string.app_name);        if (accountinfo.getApptitle() == null || accountinfo.getApptitle().equals("")) {            tv_headerTitle.setText("时光树");        } else {            tv_headerTitle.setText(accountinfo.getApptitle());        }        right_tv.setText("发动态");//      if (AppServer.getInstance().getAccountInfo().getRole() == 0) {//          right_tv.setVisibility(View.VISIBLE);//      } else {//          right_tv.setVisibility(View.GONE);//      }        right_tv.setVisibility(View.GONE);//      if (accountinfo.getRole() == AppConstants.TEACHERROLE) {//          iv_right.setVisibility(View.VISIBLE);//      } else {//          iv_right.setVisibility(View.GONE);//      }        iv_right.setVisibility(View.VISIBLE);        iv_right.setOnClickListener(this);        right_tv.setOnClickListener(this);//      btn_top_barcode.setOnClickListener(this);//      barcode_teacher.setOnClickListener(this);        pop_in = AnimationUtils.loadAnimation(getActivity(), R.anim.pop_in);        pop_out = AnimationUtils.loadAnimation(getActivity(), R.anim.pop_out);//      sendspeaktv.setOnClickListener(this);//      sendspeak_teacher.setOnClickListener(this);//      writesctv.setOnClickListener(this);//      addfriendtv.setOnClickListener(this);//      addfriend_teacher.setOnClickListener(this);        rl_menu.setOnClickListener(this);//      creategroupTv.setOnClickListener(this);//      sendmsg.setOnClickListener(this);        // 统一入口        SimpleAdapter unifiedAdapter = new SimpleAdapter(getActivity(), getData(), R.layout.item_home_menu_list,                new String[]{"img", "content"}, new int[]{R.id.home_menu_list_icon, R.id.home_menu_list_content});        unifiedLV.setAdapter(unifiedAdapter);        unifiedLV.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                List<MenuBean> menuBeans = new ArrayList<MenuBean>();                hidePullMenu();                try {                    menuBeans = DbHelper.getDB(AppContext.getInstance()).findAll(MenuBean.class);                } catch (DbException e) {                    e.printStackTrace();                }                if (menuBeans!=null && menuBeans.size() > position && menuBeans.get(position)!=null) {                    if (menuBeans.get(position).getUrl()!=null && !menuBeans.get(position).getUrl().equals("")) {                        Bundle noticebundle = new Bundle();                        noticebundle.putString(AppConstants.INTENT_URL, AppUtils.replaceUnifiedUrl(menuBeans.get(position).getUrl()));//                        noticebundle.putString(AppConstants.INTENT_URL, "http://kmapp.zgyey.com/test.html");//                        noticebundle.putString(AppConstants.INTENT_URL, "http://192.168.0.138:555/Test/ViewPhotos");//                        noticebundle.putString(AppConstants.INTENT_URL, "http://t.kmapp.zgyey.com/Test/ViewPhotos");//                        noticebundle.putString(AppConstants.INTENT_URL, "http://192.168.0.138:5555/mcupload/index?client=1\n"); // 上传照片//                        noticebundle.putString(AppConstants.INTENT_URL, "http://m.jkzx.zgyey.com/mcupload/Index?client=1&uid=295767"); // 正式网关上传照片//                        noticebundle.putString(AppConstants.INTENT_URL, AppUtils.replaceUnifiedUrl("http://m.class.zgyey.com?uid={uid}&cid={cid}&appver={appver}&client={client}")); // 正式网关上传照片                        noticebundle.putString(AppConstants.INTENT_NAME, menuBeans.get(position).getTitle());                        startAnimActivity(CommonBrowser.class, noticebundle);                        return;                    }                    switch (menuBeans.get(position).getType()) {                        case 1:  // 发通知                            if (accountinfo.getNoticeurl() != null && !accountinfo.getNoticeurl().equals("")) {                                Bundle noticebundle = new Bundle();                                noticebundle.putString(AppConstants.INTENT_URL, accountinfo.getNoticeurl());                                noticebundle.putString(AppConstants.INTENT_NAME, "发通知");                                startAnimActivity(CommonBrowser.class, noticebundle);                            }                            break;                        case 2:  // 发动态                            Intent a = new Intent(getActivity(), ServicePublishSpeakActivity.class);                            a.putExtra("type", AppConstants.GETGROUP);                            a.putExtra("from", "home");                            a.putExtra("cid", accountinfo.getCid());                            a.putExtra("cname", accountinfo.getCname());                            startActivity(a);//                          map.put("img", R.drawable.home_menu_icon_dynamic);                            break;                        case 3:  // 发视频//                          map.put("img", R.drawable.home_menu_icon_video);                            break;                        case 4:  // 记日程                            Intent intent4 = new Intent(getActivity(), ServiceScheduleWriteActivity.class);                            intent4.putExtra("type", AppConfig.SWITCH_TYPE_HOME);                            intent4.putExtra("state", "homeschedule");                            startActivity(intent4);                            break;                        case 5:  // 成长评估//                          map.put("img", R.drawable.home_menu_icon_growthassessment);                            break;                        case 6:  // 班级点名//                          map.put("img", R.drawable.home_menu_icon_rollcall);                            break;                        case 7:  // 请假//                          Intent intent7 = new Intent(getActivity(), GrowthDiaryActivity.class);//                          startActivity(intent7);//                          map.put("img", R.drawable.home_menu_icon_leave);                            break;                        case 8:  // 记日记                            Intent intent8 = new Intent(getActivity(), GrowthDiaryActivity.class);                            startActivity(intent8);//                          map.put("img", R.drawable.home_menu_icon_leave);                            break;                        default:  // 默认//                          map.put("img", R.drawable.home_menu_icon_leave);                            break;                    }                }            }        });        messageLv = (XListView)this.findViewById(R.id.home_Message_lv);        messageLv.setOnItemClickListener(this);        messageLv.setOnItemLongClickListener(this);        rl_menu.setOnTouchListener(new OnTouchListener() {            @Override            public boolean onTouch(View arg0, MotionEvent arg1) {                if (istop) {                    istop = false;                    isback = false;                    rl_menu.startAnimation(pop_in);//                  if (role == 2) {////                      rlMenuParent.startAnimation(pop_in);////                      rlMenuParent.setVisibility(View.VISIBLE);//                  } else {                        rl_menu.startAnimation(pop_in);                        rl_menu.setVisibility(View.VISIBLE);//                  }                    iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));                } else {                    istop = true;                    isback = true;//                  if (role == 2) {////                    rlMenuParent.startAnimation(pop_out);////                    rlMenuParent.setVisibility(View.GONE);//                  } else {                        rl_menu.startAnimation(pop_out);                        rl_menu.setVisibility(View.GONE);//                  }                    rl_menu.setEnabled(false);                    iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));                }                return false;            }        });//        rlMenuParent.setOnTouchListener(new OnTouchListener() {//            @Override//            public boolean onTouch(View arg0, MotionEvent arg1) {//                if (istop) {//                    istop = false;//                    isback = false;//                    rl_menu.startAnimation(pop_in);//                    if (role == 2) {//                        rlMenuParent.startAnimation(pop_in);//                        rlMenuParent.setVisibility(View.VISIBLE);//                    } else {//                        rl_menu.startAnimation(pop_in);//                        rl_menu.setVisibility(View.VISIBLE);//                    }////                    iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));//                } else {//                    istop = true;//                    isback = true;//                    if (role == 2){//                        rlMenuParent.startAnimation(pop_out);//                        rlMenuParent.setVisibility(View.GONE);//                    } else {//                        rl_menu.startAnimation(pop_out);//                        rl_menu.setVisibility(View.GONE);//                    }//                    rlMenuParent.setEnabled(false);//                    iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));//                }//                return false;//            }//        });        initXListView();    }    private List<Map<String, Object>> getData() {        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();        Map<String, Object> map = new HashMap<String, Object>();        List<MenuBean> menuBeans = new ArrayList<MenuBean>();        try {            menuBeans = DbHelper.getDB(AppContext.getInstance()).findAll(MenuBean.class);        } catch (DbException e) {            e.printStackTrace();        }        if (menuBeans!=null && menuBeans.size()!=0) {            for (int i = 0; i < menuBeans.size(); i++) {                map = new HashMap<String, Object>();                switch (menuBeans.get(i).getType()) {                    case 1:  // 发通知                        map.put("img", R.drawable.home_menu_icon_notice);                        break;                    case 2:  // 发动态                        map.put("img", R.drawable.home_menu_icon_dynamic);                        break;                    case 3:  // 发视频                        map.put("img", R.drawable.home_menu_icon_video);                        break;                    case 4:  // 记日程                        map.put("img", R.drawable.home_menu_icon_schedule);                        break;                    case 5:  // 成长评估                        map.put("img", R.drawable.home_menu_icon_growthassessment);                        break;                    case 6:  // 班级点名                        map.put("img", R.drawable.home_menu_icon_rollcall);                        break;                    case 7:  // 请假                        map.put("img", R.drawable.home_menu_icon_leave);                        break;                    case 8:  // 记日记                        map.put("img", R.drawable.home_menu_icon_diary);                        break;                    default:  // 默认                        map.put("img", R.drawable.home_menu_icon_notice);                        break;                }                map.put("content", menuBeans.get(i).getTitle());//              map.put("url", menuBeans.get(i).getUrl());                list.add(map);            }        }        return list;    }    public class NetWorkStateReceive extends BroadcastReceiver {        private ConnectivityManager connectivityManager;        private NetworkInfo info;        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {                connectivityManager = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);                info = connectivityManager.getActiveNetworkInfo();                if(info != null && info.isAvailable()) {                    netCheckRL.setVisibility(View.GONE);                } else {                    netCheckRL.setVisibility(View.VISIBLE);                    netCheckTv.setText("网络不可用，请检查您的网络设置。");                }            }        }    }    private void initRecentData() {        try {            mdata = DbHelper.getDB(getActivity()).findAll(Selector.from(MessageRecent.class).where(WhereBuilder.b("toId", "=", AppContext.getInstance().getAccountInfo().getUid())).orderBy("date",true));            if (mdata == null) {                mdata = new ArrayList<MessageRecent>();            }            messageRecentAdapter = new MessageRecentAdapter(AppContext.getInstance(), mdata);            messageLv.setAdapter(messageRecentAdapter);            // 更新头像的任务        } catch (DbException e) {            e.printStackTrace();        }    }    private void initXListView() {        // 首先不允许加载更多        messageLv.setPullLoadEnable(false);        // 允许下拉        messageLv.setPullRefreshEnable(true);        // 设置监听器        messageLv.setXListViewListener(this);        messageLv.pullRefreshing();        messageLv.setDividerHeight(0);        // 加载数据        initOrRefresh();    }    @Override    public boolean onItemLongClick(AdapterView<?> arg0, View arg1, int position, long arg3) {        final MessageRecent messageRecent = (MessageRecent) messageRecentAdapter.getItem(position-1);        showDialog(messageRecent.getName(), "确定","删除会话", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface arg0, int arg1) {                deleteRecent(messageRecent);            }        });        return true;    }    /**     * 删除会话     * deleteRecent     * @param recent     */    private void deleteRecent(MessageRecent recent) {        messageRecentAdapter.getList().remove(recent);        messageRecentAdapter.notifyDataSetChanged();        try {            DbHelper.getDB(getActivity()).delete(recent);        } catch (DbException e) {            e.printStackTrace();        }    }    @Override    public void onItemClick(AdapterView<?> arg0,final View view, int position, long arg3) {        Session session = Session.getSession();        // 处理双击界面空白现象        count++;        if (count == 1) {            UtilsLog.i(TAG, "count is 1 !!!!!!!!!!!!!!!!!!!!!1，第一次时间：" + firClick);            firClick = System.currentTimeMillis();            mhandler.sendEmptyMessageDelayed(INIT_COUNT_MSG,INIT_COUNT_TIME);        } else if (count == 2) {            count = 0;            secClick = System.currentTimeMillis();            UtilsLog.i(TAG, "count is 2 !!!!!!!!!!!!!!!!!!!!!1，第二次时间：" + secClick);            UtilsLog.i(TAG, "相差时间 : " + (secClick - firClick));            if (secClick - firClick < 1000) {                // 双击事件                UtilsLog.i(TAG, "小于1500，直接返回");                firClick = 0;                secClick = 0;                return;            }            firClick = 0;            secClick = 0;        } else {            count = 0;            UtilsLog.i(TAG, "count is 0 !!!!!!!!!!!!!!!!!!!!!1");        }        UtilsLog.i(TAG, "start to do something");        if (mdata.size() > 0) {            if (position == 0) {                return ;            }//          if (true) {//              Intent intent = new Intent(this.getActivity(), MediaPlayActivity.class);//              intent.putExtra("videoId", "2A0B94DCD05391789C33DC5901307461");//              startActivity(intent);//              return;//          }            final MessageRecent message = mdata.get(position-1);            SimpleTask<String> task = new SimpleTask<String>() {                @Override                protected String doInBackground() {                    message.setNewcount(0);                    try {                        DbHelper.getDB(getActivity()).update(message, "newcount");                    } catch (DbException e) {                        e.printStackTrace();                    }                    return null;                }                @Override                protected void onPostExecute(String s) {                    super.onPostExecute(s);                    TextView textViewv = (TextView)view.findViewById(R.id.tv_message_num);                    textViewv.setVisibility(View.GONE);                }            };            task.execute();            Bundle bundle = new Bundle();//          isFirstLook = SharedPreferencesHelper.getInstance(appcontext).getString(info.getUid()+"$","0$"+info.getUid());            String isFirstLook = SharedPreferencesHelper.getInstance(appcontext).getString(AppConstants.TIMETREE_IS_FIRSTLOGIN, "0");            if (message.getAction() == AppConstants.PUSH_ACTION_PUBLICACCOUNT) { // 公众号列表                PublicAccount account = null;                try {                    account = DbHelper.getDB(AppContext.getInstance()).findFirst(PublicAccount.class, WhereBuilder.b("publicid", "=", message.getFromId()));                } catch (DbException e) {                    e.printStackTrace();                }                if (account!=null) {                    // 获取标题，传递到子页面                    String intent_title = "";                    if (mdata!=null && mdata.size() >= position) {                        MessageRecent msgrecent = mdata.get(position - 1);                        if (msgrecent.getAction() == 0 && !msgrecent.getHxfrom().equals("0")) {                            intent_title = HuanxinController.getRelationNameByRecent(msgrecent);                        } else {                            if (msgrecent.getName() == null || msgrecent.getName().length() == 0) {                                intent_title = msgrecent.getTitle();                            } else {                                intent_title = msgrecent.getName();                            }                        }                    }                    if (account.getIsfirstlook() == AppConstants.IS_FIRST_LOOK) { // 表示第一次进入公众号列表                        if (Arrays.asList(AppConstants.PUBLIC_GUIDE_IDS).contains(message.getFromId())) { // 首页消息的message.getFromID就是公众号的publicId                            showWhatPage(Integer.valueOf(message.getFromId()), message);                        } else {                            session.put(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                            session.put(AppConstants.INTENT_KEY_TYPEID, message.getTypeid() == -1 ? -1 : message.getTypeid());                            session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                            bundle.putString(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                            bundle.putString(AppConstants.INTENT_KEY_TITLE, intent_title); // 保持子页面标题一致                            startAnimActivity(PublicAccountMessageList.class, bundle);                        }                    } else { // 不是第一次进入公众号                        session.put(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                        session.put(AppConstants.INTENT_KEY_TYPEID, message.getTypeid() == -1 ? -1 : message.getTypeid());                        session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                        bundle.putString(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                        bundle.putString(AppConstants.INTENT_KEY_TITLE, intent_title); // 保持子页面标题一致                        startAnimActivity(PublicAccountMessageList.class, bundle);                    }                } else {                    session.put(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                    session.put(AppConstants.INTENT_KEY_TYPEID, message.getTypeid() == -1 ? -1 : message.getTypeid());                    session.put(AppConstants.STATE, AppConstants.PUACFRAGMENT_LOOKPUAC);                    bundle.putString(AppConstants.INTENT_KEY_FROMID, message.getFromId() + "");                    startAnimActivity(PublicAccountMessageList.class, bundle);                }            } else if (message.getAction() == AppConstants.PUSH_ACTION_ADD_FRIENDS) { // 添加好友                startAnimActivity(ContactsFriendRequestActivity.class);            } else if ( message.getAction() == AppConstants.PUSH_ACTION_FRIENDS || message.getAction() == AppConstants.PUSH_ACTION_AGREE_FRIENDS ) {              AccountInfo info = AppServer.getInstance().getAccountInfo();              Bundle bundle2 = new Bundle();              bundle2.putString("userId", message.getHxfrom());              bundle2.putString("nick", HuanxinController.getRelationNameByRecent(message) );              bundle2.putString("toChatAvatar", message.getAvatar());              startAnimActivity(ChatActivity2.class, bundle2);            } else if ( message.getAction() == AppConstants.PUSH_ACTION_TASK ) {                // 进入任务列表                if (message.getUrl()!=null && !message.getUrl().equals("")&& message.getUrl().contains("http")) {                    Bundle taskbundle = new Bundle();//                    taskbundle.putString(AppConstants.INTENT_URL, message.getUrl());                    taskbundle.putString(AppConstants.INTENT_URL, AppUtils.replaceUnifiedUrl(message.getUrl()));                    taskbundle.putString(AppConstants.INTENT_NAME, "任务");                    startAnimActivity(CommonBrowser.class, bundle);                } else {                    startAnimActivity(ServiceTaskMainActivity.class);                }            } else if ( message.getAction() == AppConstants.PUSH_ACTION_NOTICE ) {                // 进入通知                if (message.getUrl()!=null && !message.getUrl().equals("") && message.getUrl().contains("http")) {                    Bundle taskbundle = new Bundle();//                    taskbundle.putString(AppConstants.INTENT_URL, message.getUrl());                    taskbundle.putString(AppConstants.INTENT_URL, AppUtils.replaceUnifiedUrl(message.getUrl()));                    taskbundle.putString(AppConstants.INTENT_NAME, "通知");                    startAnimActivity(CommonBrowser.class, taskbundle);                } else {                }            } else if ( message.getAction() == AppConstants.PUSH_ACTION_GUIDE_MASTER || message.getAction() == AppConstants.PUSH_ACTION_GUIDE_TEACHER) {                Bundle guideBundle = new Bundle();                guideBundle.putInt(AppConstants.INTENT_ACTION, message.getAction());                startAnimActivity(Invite_select_Activity.class);            } else if (message.getAction()>=AppConstants.PUSH_ACTION_SYSTEM_MESSAGE) {                if (message.getAction() == 77) { // 个人资料界面                    Intent intent=new Intent(getActivity(), MeInfoActivity.class);                    startActivity(intent);                    return;                }                if (message.getUrl()!=null && message.getUrl().contains("api=1")) {                    String mode = "";                    String replace = "";                    if (!StringUtils.getValue(message.getUrl(), "mode=").equals("")                            && (StringUtils.getValue(message.getUrl(), "mode=").equals("0") || StringUtils.getValue(message.getUrl(), "mode=").equals("1"))) {                        mode = StringUtils.getValue(message.getUrl(), "mode=");                    } else {                        mode = "0";                    }                    if (!StringUtils.getValue(message.getUrl(), "replace=").equals("")) {                        replace = StringUtils.getValue(message.getUrl(), "replace=");                    } else {                        replace = "";                    }                    Intent showPhotoIntent;                    showPhotoIntent = new Intent(getActivity(), PhotoShowGeneralActivity.class);                    showPhotoIntent.putExtra("openType", mode + "");                    showPhotoIntent.putExtra("api", message.getUrl().replace("{result}", "1"));                    showPhotoIntent.putExtra("replace", replace);                    startActivity(showPhotoIntent);                } else {                    Bundle taskbundle = new Bundle();//                  taskbundle.putString(AppConstants.INTENT_URL, message.getUrl());                    taskbundle.putString(AppConstants.INTENT_URL, AppUtils.replaceUnifiedUrl(message.getUrl()));                    taskbundle.putString(AppConstants.INTENT_NAME, message.getTitle());                    startAnimActivity(CommonBrowser.class, taskbundle);                }            }        } else {            return ;        }    }    public void showWaringDialog(int role) {        PhotoDialog dialog = new PhotoDialog(this.getActivity(), role);        dialog.show();    }   public void showWhatPage(int fromId,MessageRecent message) {       Intent intent = new Intent(this.getActivity(), WizardActivity.class);       Bundle bundle = new Bundle();       bundle.putSerializable("message", message);       switch (fromId) {           case AppConstants.TIMETREE_DO_DIRECTOR:               intent.putExtra("fromdId", AppConstants.TIMETREE_DO_DIRECTOR);               break;           case AppConstants.TIMETREE_DO_TEACHER:               intent.putExtra("fromdId", AppConstants.TIMETREE_DO_TEACHER);               break;           case AppConstants.TIMETREE_DO_PARENT:               intent.putExtra("fromdId", AppConstants.TIMETREE_DO_PARENT);               break;           case AppConstants.TIMETREE_DIRECTOR_PUBLIC:               intent.putExtra("fromdId", AppConstants.TIMETREE_DIRECTOR_PUBLIC);               break;           case AppConstants.TIMETREE_TEACHER_PUBLIC:               intent.putExtra("fromdId", AppConstants.TIMETREE_TEACHER_PUBLIC);               break;           case AppConstants.TIMETREE_PARENT_PUBLIC:               intent.putExtra("fromdId", AppConstants.TIMETREE_PARENT_PUBLIC);               break;       }       intent.putExtras(bundle);       startActivity(intent);   }    TextToSpeech.OnInitListener listener = new TextToSpeech.OnInitListener() {        @Override        public void onInit(int i) {            if (tts!=null) {                int result = tts.setLanguage(Locale.CHINA);                if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {                    tts.speak("欢迎来到时光树", 0, null);                }            }        }    };    @Override    public void onClick(View v) {        Intent intent;        switch (v.getId()) {        case R.id.right_tv:            switchmenu(istop);//          if(true){//              Bundle noticebundle = new Bundle();//              noticebundle.putString(AppConstants.INTENT_URL, "http://ttt.zgyey.com/images/一日流程/index.html");//              noticebundle.putString(AppConstants.INTENT_NAME,"小刘测试");//              startAnimActivity(CommonBrowser.class,noticebundle);//              return;//          }//          AccountInfo info = AppServer.getInstance().getAccountInfo();//          if (info.getKid() == 0) {//              if (info.getRole() == 0) {//                  showWaringDialog(0);//              } else if (info.getRole() == 1) {//                  showWaringDialog(1);//              }//              return;//          }//          if (info.getNoticeurl()!=null && !info.getNoticeurl().equals("")) {//              Bundle noticebundle = new Bundle();//              noticebundle.putString(AppConstants.INTENT_URL, info.getNoticeurl());//              noticebundle.putString(AppConstants.INTENT_NAME, "发通知");//              startAnimActivity(CommonBrowser.class, noticebundle);//          }            break;        case R.id.right_btn:            switchmenu(istop);            break;        case R.id.id_sendmsg_iv:            /* switchmenu(istop);            intent = new Intent(getActivity(), SendNotificationActivity.class);            startActivity(intent); */            break;        case R.id.btn_top_barcode_iv:        case R.id.btn_top_barcode_teacheriv:            switchmenu(istop);            startAnimActivity(CaptureActivity.class);            break;        case R.id.menu_btn:            switchmenu(istop);            break;        case R.id.id_sendspeak_iv:        case R.id.id_sendspeak_tv_teacheriv:            switchmenu(istop);            intent = new Intent(getActivity(), ServicePublishSpeakActivity.class);            intent.putExtra("type", AppConstants.MAINSPEAK);            startActivity(intent);            break;        case R.id.id_writesc_iv: // 记日程            switchmenu(istop);            intent = new Intent(getActivity(), ServiceScheduleWriteActivity.class);            intent.putExtra("type", AppConfig.SWITCH_TYPE_HOME);            intent.putExtra("state", "homeschedule");            startActivity(intent);            break;        case R.id.id_addfriend_iv:        case R.id.id_addfriend_tv_teacheriv:            switchmenu(istop);            intent = new Intent(getActivity(), ContactsAddFriendActivity.class);            startActivity(intent);            break;            /* case R.id.id_shareapp_tv:            switchmenu(istop);            intent = new Intent(getActivity(), MeShareActivity.class);            startActivity(intent);            break; */        case R.id.id_creategroup_iv:            switchmenu(istop);            intent = new Intent(getActivity(), ServiceCreatKinderSelectActivity.class);            startActivity(intent);            break;        default:            break;        }    }    @Override    public void onRefresh() {        try {            getNewMessage();            ParentGetMessage();        } catch (NullPointerException e) {            e.printStackTrace();            UtilsLog.i(TAG, "onRefresh getNewMessage or getNewMessage NullPointerException");        }    }    public void switchmenu(Boolean isstop) {        if (isstop) {            iv_right.setImageResource(R.drawable.icon_plus);            role = AppServer.getInstance().getAccountInfo().getRole();//          if (role == 2) {//              rlMenuParent.startAnimation(pop_in);//              rlMenuParent.setVisibility(View.VISIBLE);//          } else {                rl_menu.startAnimation(pop_in);                rl_menu.setVisibility(View.VISIBLE);//          }            istop = false;            isback = false;            rl_menu.setEnabled(true);//          rlMenuParent.setEnabled(true);            iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));        } else {            iv_right.setImageResource(R.drawable.icon_plus);            role = AppServer.getInstance().getAccountInfo().getRole();//          if (role == 2) {//              rlMenuParent.startAnimation(pop_out);//              rlMenuParent.setVisibility(View.GONE);//          } else {                rl_menu.setVisibility(View.GONE);                rl_menu.startAnimation(pop_out);//          }            istop = true;            isback = true;            iv_right.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));        }    }    @Override    public void onLoadMore() { }    private void initOrRefresh() {        List<MessageRecent> list = initMsgData();        if (messageRecentAdapter != null) {            if (PushReceiver.mNewNum != 0) { // 用于更新当在聊天界面锁屏期间来了消息，这时再回到聊天页面的时候需要显示新来的消息                int news =  PushReceiver.mNewNum; // 有可能锁屏期间，来了N条消息,因此需要倒叙显示在界面上                if (list!=null) {                    UtilsLog.i(TAG, "initOrRefresh list is null");                    int size = list.size();                    messageRecentAdapter.setList(list);                }            } else {                messageRecentAdapter.notifyDataSetChanged();            }        } else {            // List<MessageRecent> list=initMsgData();            if (list!=null) {                messageRecentAdapter = new MessageRecentAdapter(AppContext.getInstance(), list);                messageLv.setAdapter(messageRecentAdapter);            }        }    }    /**     * 当家长身份时，不同的角色登陆获取公众号消息。     */    private void ParentGetMessage() throws NullPointerException{        UtilsLog.i(TAG, "TeacherGetMessage is start");        try {            MessageDb db = new MessageDb();            List<MessageRecent>messagePublicAccountList = DbHelper.getDB(AppContext.getInstance()).findAll(MessageRecent.class, WhereBuilder.b("action", "=", 1).and("toId", "=", accountinfo.getUid()));            List<MessagePublicAccount>messagePublicAccountList1 = DbHelper.getDB(AppContext.getInstance()).findAll(MessagePublicAccount.class, WhereBuilder.b("action", "=", 1));            if ((messagePublicAccountList == null || messagePublicAccountList.size() == 0)) { // 只有当首页列表中没有消息时才刷新。                if (messagePublicAccountList1 == null || messagePublicAccountList1.size() == 0) { // 公众号没有历史消息，需要调接口取值。                    List<SimpleTask> list = new ArrayList<SimpleTask>();                    List<PublicAccount> publicAccountList = DbHelper.getDB(AppContext.getInstance()).findAll(PublicAccount.class);                    if (publicAccountList!=null && publicAccountList.size()!=0) {                        getRecentMessage();//                      for (int i = 0; i < publicAccountList.size(); i++) {//                          if (publicAccountList.get(i).getSubscription() == 1) {//                              list.add(getLastPublicAccount(publicAccountList.get(i),publicAccountList.size(),i));//                          }//                      }//                      OrderedTaskExecutor executor = TaskExecutor.newOrderedExecutor();//                      for (int i = 0; i < list.size(); i++) {//                          executor.put(list.get(i));//                      }//                      executor.start();                    }                } else { // 直接取数据中的历史消息                    for (int i = 0; i < messagePublicAccountList1.size(); i++){                        MessagePublicAccount pa = messagePublicAccountList1.get(i);                        if (pa.getTypeid() > 0) {                            try {                                Msgtypes type = DbHelper.getDB(AppContext.getInstance()).findFirst(Msgtypes.class,WhereBuilder.b("publicid", "=", pa.getPublicid()).and("typeid", "=", pa.getTypeid()));                                if (type!=null) {                                    pa.setName(type.getTypename() + "");                                    pa.setAvatar(type.getAvatar() + "");                                }                            } catch (DbException e) {                                e.printStackTrace();                            }                        }                        pa.setToId(accountinfo.getUid());                        messagePublicAccountList1.set(i, pa);                    }                    db.updateNewsPublicAccounts(messagePublicAccountList1);                    refresh();                }            }        } catch (DbException e) {            e.printStackTrace();        }        UtilsLog.i(TAG, "TeacherGetMessage is finish");    }    /**     * 加载消息历史，从数据库中读出     * @throws DbException     */    private List<MessageRecent> initMsgData() {        UtilsLog.i(TAG, "initMsgData is start");        // List<MessageRecent> mlist ;        // List<PublicAccount> publicAccountList = new ArrayList<PublicAccount>();        List<MessageRecent> list = new ArrayList<MessageRecent>();        List<MessageRecent> mlist = new ArrayList<MessageRecent>() ;        MessageRecent messageRecent = null;        // 删除掉强制更新的消息        try {            if (DbHelper.getDB(AppContext.getInstance()).tableIsExist(MessageRecent.class)) {                messageRecent = DbHelper.getDB(AppContext.getInstance()).findFirst(MessageRecent.class, WhereBuilder.b("action", "=", AppConstants.PUSH_ACTION_FORCE_UPDATE));                UtilsLog.i(TAG, "find force update message");                if (messageRecent != null) {                    DbHelper.getDB(AppContext.getInstance()).delete(messageRecent);                    UtilsLog.i(TAG, "delete force update message");                }            }        } catch (DbException e) {            e.printStackTrace();            UtilsLog.i(TAG, "find or delete force update message DbException");        }        try {            try {            AccountInfo accountinfo = AppServer.getInstance().getAccountInfo();                if (accountinfo.getRole() == AppConstants.PARENTROLE) {                    /**                     * 此方法用于剔除和家长角色身份不匹配的  聊天消息                     */                    list = DbHelper.getDB(getActivity()).findAll(Selector.from(MessageRecent.class).where(WhereBuilder.b("toId", "=", AppServer.getInstance().getAccountInfo().getUid())).or("action", ">", 70).orderBy("date", true));                    if (list!=null) {                        for (int i = 0; i < list.size(); i++) {                            if (list.get(i).getAction() == 0) { // 0表示聊天消息                                String hxId = list.get(i).getHxto();                                if (hxId.length() < 2) {                                    break;                                } else {                                    String relation = hxId.substring(hxId.length() - 1, hxId.length());                                    if (!relation.equals(accountinfo.getRelationship() + "")){                                        mlist.add(list.get(i));                                    }                                }                            }                        }                    }                } else {                    list = DbHelper.getDB(getActivity()).findAll(Selector.from(MessageRecent.class).where(WhereBuilder.b("toId", "=", AppServer.getInstance().getAccountInfo().getUid())).or("action", ">", 70).orderBy("date", true));                }                list.removeAll(mlist);            } catch (NullPointerException e) {                UtilsLog.e(TAG, "查询首页消息空指针 e-->" + e.getMessage());                return new ArrayList<MessageRecent>();            }            // list = DbHelper.getDB(getActivity()).findAll(MessageRecent.class, WhereBuilder.b("toId", "=", AppContext.getInstance().getAccountInfo().getUid()));            // list = DbHelper.getDB(getActivity()).findAll(Selector.from(MessageRecent.class).where(WhereBuilder.b("toId", "=", AppContext.getInstance().getAccountInfo().getUid())));            if (list == null) {                list = new ArrayList<MessageRecent>();            }            mdata = list;            if (list!=null) { // 发消息对方更换头像后，显示的头像不一致问题，以最新为准                Map<String, String> keymap = new HashMap<String,String>();                for (int i = 0; i < list.size(); i++) {                    MessageRecent recent = list.get(i);                    if (keymap.containsKey(recent.getFromId()) && recent.getAction() < 50 && recent.getAction()!= 1){                        recent.setAvatar(keymap.get(recent.getFromId()));                        list.set(i,recent);                    } else {                        keymap.put(recent.getFromId(),recent.getAvatar());                    }                    /*                    MessageRecent recent = list.get(i);                    if (i!=0) {                        MessageRecent newRecent = list.get(i - 1);                        if (recent.getFromId().equals(newRecent.getFromId())) {                            recent.setAvatar(newRecent.getAvatar());                            list.set(i,recent);                        }                    }                    */                }            }        } catch (DbException e) {            e.printStackTrace();            if (list == null) {                list = new ArrayList<MessageRecent>();            }        }        UtilsLog.i(TAG, "initMsgData is finish");        return list;    }    private boolean hidden;    @Override    public void onHiddenChanged(boolean hidden) {        super.onHiddenChanged(hidden);        UtilsLog.i(TAG, "onHiddenChanged");        this.hidden = hidden;    }    public void refresh() {        UtilsLog.i(TAG, "refresh is start");        try {            getActivity().runOnUiThread(new Runnable() {                public void run() {                    List<MessageRecent> list = initMsgData();                    if (list!=null) {                        messageRecentAdapter = new MessageRecentAdapter(AppContext.getInstance(), list);                        messageLv.setAdapter(messageRecentAdapter);                    }                }            });        } catch (Exception e) {            e.printStackTrace();        }        UtilsLog.i(TAG, "refresh is finish");    }    @Override    public void onResume() {        super.onResume();        getNewFlag = 0;        UtilsLog.i(TAG, "into onResume");        if (!hidden) {//          updateRecentHead();//          getNewFlag = 0;//          getNewMessage();//          refresh();        }    }    public void playCcVedio(String playVedio){        Intent intent = new Intent(getActivity(), MediaPlayActivity.class);        intent.putExtra("videoId", playVedio);        startActivity(intent);    }    /**     *  处理最新消息：     *     * 1、保存聊天消息，并更新到最近消息     * 2、保存系统消息，并更新到最近消息     * 3、先过滤掉未订阅的消息，然后保存公众号消息，并更新到最近消息     * 4、显示最新消息到前台     * 5、更新公众号消息状态（回复已收到）     * 6、更新聊天消息状态（回复已收到）     * */    public void handleMessage(Object obj) {        UtilsLog.i(TAG,"getNewMessage success ");        AccountInfo info = AppServer.getInstance().getAccountInfo();        MessageDb mdb = new MessageDb();        MessageNews messageNew = (MessageNews)obj;        if (messageNew == null) {            return;        }        List<Chat> messageFriends = messageNew.getFriends();        List<MessagePublicAccount> messagePublicAccounts = messageNew.getPublics();        List<MessageSystems> messageSystemses = messageNew.getSystems();        // 1、保存聊天消息，并更新到最近消息        if (messageFriends!=null && messageFriends.size() > 0) {            mdb.updateNewsFriends(messageFriends);        }        // 2、保存系统消息，并更新到最近消息        if (messageSystemses!=null && messageSystemses.size()!=0) {            StringBuffer buffer = new StringBuffer();            for (int i = 0; i < messageSystemses.size(); i++) {                MessageSystems systemMessage = messageSystemses.get(i);//              systemMessage.setToId(info.getUid());//              messageSystemses.add(pa);                if (systemMessage.getAction() == AppConstants.PUSH_ACTION_FORCE_UPDATE) { // 强制更新                    mhandler.sendEmptyMessage(FORCE_UPDATE_DIALOG_MSG);                } else { // 强制更新消息不添加进消息列表                    mdb.addNewSystemMessage(messageSystemses.get(i), messageSystemses.get(i).getAction());                }                AppServer.getInstance().updateMessageStatus(messageSystemses.get(i).getPmid(), info.getUid(), AppConstants.GT_PUSH_SYSTEM_MESSAGE, info.getRelationship(), new OnAppRequestListener() {                    @Override                    public void onAppRequest(int code, String message, Object obj) { }                });                break;            }        }        // 3、先过滤掉未订阅的消息，然后保存公众号消息，并更新到最近消息        List<MessagePublicAccount> messageList = new ArrayList<MessagePublicAccount>();        if (messagePublicAccounts!=null && messagePublicAccounts.size() > 0) {            List<Integer> account_ids = new ArrayList<Integer>();            try {                List<PublicAccount> accounts = DbHelper.getDB(AppContext.getInstance()).findAll(PublicAccount.class);                if (accounts!=null) {                    for (PublicAccount account:accounts) {                        if (account.getSubscription() == 1) {                            account_ids.add(account.getPublicid()); // 包含已订阅的公众号id                        }                    }                }            } catch (DbException e) {                e.printStackTrace();            }            // 删除公众号列表中未订阅的公众号消息            try {                List<MessagePublicAccount> messagepublics = DbHelper.getDB(AppContext.getInstance()).findAll(MessagePublicAccount.class);                if (messagepublics!=null) {                    for (MessagePublicAccount messagepub : messagepublics) {                        if (!account_ids.contains(messagepub.getPublicid())) {                            DbHelper.getDB(AppContext.getInstance()).delete(messagepub);                        }                    }                }            } catch (DbException e) {                UtilsLog.i(TAG, "PublicAccount is not exist the messagePublicAccount, delete it but fail: DbException");                e.printStackTrace();            }            // 过滤掉未订阅消息            for (int i = 0; i < messagePublicAccounts.size(); i++) {                if (account_ids.size() == 0) {                    // 发现这个account_ids没有数据，也就是说这个时候公众号还没加载完成，需要记录下来，下次再次加载。                    SharedPreferencesHelper.getInstance(AppContext.getInstance()).setBoolean("isAccountNull", true);                    break;                }                if (account_ids.contains(messagePublicAccounts.get(i).getPublicid())) {                    MessagePublicAccount pa = messagePublicAccounts.get(i);                    if (pa.getTypeid() > 0) {                        try {                            Msgtypes type = DbHelper.getDB(AppContext.getInstance()).findFirst(Msgtypes.class, WhereBuilder.b("publicid", "=", pa.getPublicid()).and("typeid", "=", pa.getTypeid()));                            if (type!=null) {                                pa.setName(type.getTypename() + "");                                pa.setAvatar(type.getAvatar() + "");                            } else {                                UtilsLog.i(TAG, "msgtypes is null, setName default value");                            }                        } catch (DbException e) {                            e.printStackTrace();                        }                    }                    pa.setToId(info.getUid());                    messageList.add(pa);                }            }            // 保存到公众号消息            mdb.updateNewsPublicAccounts(messageList);        }        // 4、显示最新消息到前台        // mdb.updateMessageRecent(messageNew);        List<MessageRecent> list = initMsgData();        if (list!=null) {            messageRecentAdapter = new MessageRecentAdapter(AppContext.getInstance(), list);            messageLv.setAdapter(messageRecentAdapter);        }        // 5、更新公众号消息状态（回复已收到）        if (messagePublicAccounts!=null) {            StringBuffer publicAccountPmid = new StringBuffer();            for (MessagePublicAccount pa : messagePublicAccounts) {                publicAccountPmid.append(pa.getPmid() + ",");            }            if (messagePublicAccounts!=null && messagePublicAccounts.size() > 0) {                String newpapmid = publicAccountPmid.toString().substring(0, publicAccountPmid.toString().length() - 1);                AppServer.getInstance().updateMessageStatus(newpapmid, info.getUid(), AppConstants.GT_PUSH_PUBLIC_MESSAGE, info.getRelationship(), new OnAppRequestListener() {                    @Override                    public void onAppRequest(int code, String message, Object obj) {                        // TODO Auto-generated method stub                    }                });            }        }        // 6、更新聊天消息状态（回复已收到）        if (messageFriends!=null) {            StringBuffer chatPmid = new StringBuffer();            for (Chat chat: messageFriends){                chatPmid.append(chat.getPmid() + ",");            }            // 更新消息状态            if (messageFriends!=null && messageFriends.size() > 0) {                String newchatPmid = chatPmid.toString().substring(0, chatPmid.toString().length() - 1);                AppServer.getInstance().updateMessageStatus(newchatPmid, info.getUid(), 0, info.getRelationship(), new OnAppRequestListener() {                    @Override                    public void onAppRequest(int code, String message, Object obj) {  }                });            }        }        messageLv.stopRefresh();        refresh();    }    public void getNewMessage() {        UtilsLog.i(TAG, "getNewMessage is start");        int relationship = accountinfo.getRelationship();        UtilsLog.i(TAG,"getNewMessage relationship is: " + relationship);        if (AppServer.getInstance().getAccountInfo().getUid() == 0) {            return;        }        if (getNewFlag == 0) {            getNewFlag = 1;            AppServer.getInstance().getNewMessage(AppServer.getInstance().getAccountInfo().getUid(), relationship, new OnAppRequestListener() {                @Override                public void onAppRequest(int code, String message, Object obj) {                    getNewFlag = 0;                    UtilsLog.i(TAG, "set getNewFlag is 0");                    if (code == AppServer.REQUEST_SUCCESS) {//                        if (obj!=null) {                            handleMessage(obj);//                        }                    }                }            });        }    }    /**     * 获取最新消息（首页消息没有时调用）     */    private void getRecentMessage() {        AppServer.getInstance().getConversationMessages(accountinfo.getUid(), accountinfo.getRelationship(), new OnAppRequestListener() {            @Override            public void onAppRequest(int code, String message, Object obj) {                if (code == AppServer.REQUEST_SUCCESS) {                    handleMessage(obj);                }            }        });    }    public static boolean onKeyDown(int keyCode, KeyEvent event) {        if (keyCode == KeyEvent.KEYCODE_BACK) {            if (!istop) {                iv_right.setImageResource(R.drawable.icon_plus);                role = AppServer.getInstance().getAccountInfo().getRole();                if (role == 2) {//                  rlMenuParent.startAnimation(pop_out);//                  rlMenuParent.setVisibility(View.GONE);                } else {                    rl_menu.setVisibility(View.GONE);                    rl_menu.startAnimation(pop_out);                }                istop = true;                isback = true;            }        }        return true;    }    public void hidePullMenu() {//      if (role == 2) {//          if(rlMenuParent.getVisibility() ==View.VISIBLE) {//          rlMenuParent.setVisibility(View.GONE);//      } else {            if (rl_menu.getVisibility() == View.VISIBLE) {                rl_menu.setVisibility(View.GONE);            }//      }        istop = true;        isback = true;    }    @Override    public boolean handleMessage(Message msg) {        switch (msg.what) {            case REFRESH_MSG:                if (refreshCount == 5) {                    cancelLoadingDialog();                    // initView();                    initRecentData();                    // prepareData();                    try {                        getNewMessage();                        ParentGetMessage();                    } catch (NullPointerException e) {                        e.printStackTrace();                        UtilsLog.i(TAG, "getNewMessage, TeacherGetMessage NullPointerException");                    }                    refreshCount = 0;                } else {                    appcontext = AppContext.getInstance();                    if (Utils.isContactsNull(appcontext, accountinfo.getRole())) {                        mhandler.sendEmptyMessage(RELOAD_WAIT_MSG);                    } else {                        cancelLoadingDialog();                        // initView();                        initRecentData();                        // prepareData();                        try {                            getNewMessage();                            ParentGetMessage();                        } catch (NullPointerException e) {                            e.printStackTrace();                            UtilsLog.i(TAG, "getNewMessage, TeacherGetMessage NullPointerException");                        }                    }                }                break;            case RELOAD_WAIT_MSG:                mhandler.sendEmptyMessageDelayed(REFRESH_MSG, RELOAD_WAIT_MSG_TIME);                refreshCount ++;                UtilsLog.i(TAG, "refreshCount is: " + refreshCount + "");                break;            case INIT_COUNT_MSG:                count = 0;                break;            case FORCE_UPDATE_DIALOG_MSG:                showUpdateDialog();                break;            default:                cancelLoadingDialog();                // initView();                initRecentData();                // prepareData();                try {                    getNewMessage();                    ParentGetMessage();                } catch (NullPointerException e) {                    e.printStackTrace();                    UtilsLog.i(TAG, "getNewMessage, TeacherGetMessage NullPointerException");                }                break;        }        return false;    }    /**     * 用来旧版本强制更新操作     */    public void showUpdateDialog() {        Dialog dialog = new Dialog(HomeFragement.this.getActivity(), R.style.Dialog_Fullscreen);        View view = LayoutInflater.from(HomeFragement.this.getActivity()).inflate(R.layout.dialog_force_upload, null);        dialog.setContentView(view);        Button force = (Button) view.findViewById(R.id.force_upload_bt);        force.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent();                intent.setAction("android.intent.action.VIEW");                Uri CONTENT_URI_BROWSERS = Uri.parse("http://sgs.yey.com/");                intent.setData(CONTENT_URI_BROWSERS);                startActivity(intent);                AppManager.getAppManager().finishActivity(HomeFragement.this.getActivity());            }        });        dialog.setOnKeyListener(new DialogInterface.OnKeyListener() { // 设置其他按键无法点击            @Override            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {                    return true;                } else {                    return false;                }            }        });        dialog.setCanceledOnTouchOutside(false);        dialog.show();    }    @Override    public void onDestroy() {        super.onDestroy();        UtilsLog.i(TAG, "into onDestroy");        getNewFlag = 0;        this.getActivity().unregisterReceiver(mReceiver);        EventBus.getDefault().unregister(this);        if (null != mhandler) {            mhandler.removeMessages(REFRESH_MSG);            mhandler.removeMessages(RELOAD_WAIT_MSG);            mhandler.removeMessages(INIT_COUNT_MSG);        }    }    public void onEventMainThread(AppEvent event) {        UtilsLog.i(TAG, "onEventMainThread:" + Thread.currentThread().getId());        if (event.getType() == AppEvent.PUSH_ADDFRIEND) {            // 刷新界面            refresh();        } else if (event.getType() == AppEvent.PUSH_AGREEFRIEND) {            refresh();        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_SYSTEMMESSAGE) {            refresh();        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_GUIDE) {            refresh();        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_NOTICE) {            refresh();        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_CHAT) {            refresh();        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_HEAD) {            if (tofriend !=null) {                try {                    MessageRecent message = DbHelper.getDB(AppContext.getInstance()).findFirst(MessageRecent.class, WhereBuilder.b("fromId", "=", tofriend.getUid()));                    if (message !=null && message.getAction() == 0) {                        message.setAvatar(tofriend.getAvatar());                        DbHelper.getDB(AppContext.getInstance()).update(message, WhereBuilder.b("fromId", "=", tofriend.getUid()), new String[]{"avatar"});                        DbHelper.updatechatHead(tofriend);                    }                    refresh();                } catch (DbException e) {                    e.printStackTrace();                }            }        } else if (event.getType() == AppEvent.HOMEFRAGMENT_REFRESH_PUBLIC_HEAD) {            if (topublicAccount!=null) {                try {                    MessageRecent message = DbHelper.getDB(AppContext.getInstance()).findFirst(Selector.from(MessageRecent.class).where("fromId", "=", topublicAccount.getPublicid()).and(WhereBuilder.b("typeid", "=", "-1")));                    // MessageRecent message = DbHelper.getDB(AppContext.getInstance()).findFirst(MessageRecent.class, WhereBuilder.b("fromId", "=", topublicAccount.getPublicid()));                    if (message !=null && message.getAction() == 1) {                        message.setAvatar(topublicAccount.getAvatar());                        message.setName(topublicAccount.getNickname());                        DbHelper.getDB(AppContext.getInstance()).update(message, WhereBuilder.b("fromId", "=", topublicAccount.getPublicid()).and("typeid", "=", "-1"), new String[]{"avatar","name"});                        DbHelper.updateMessagePublicAccountHead(topublicAccount);                    }                    refresh();                } catch (DbException e) {                    e.printStackTrace();                }            }        } else if (event.getType() == AppEvent.REFRESHGETNEWMESSAGE) {            UtilsLog.i(TAG, "through hxincmdmessagereceiver postevent begin to refreshgetnewmessage ..." );            getNewMessage();        }    }    private Friend tofriend = null;    private PublicAccount topublicAccount = null;    private SimpleTask<String> getUpdateHeadTask(final String id,final int action) {        UtilsLog.i(TAG, "getUpdateHeadTask is start");        SimpleTask<String> simple = new SimpleTask<String>() {            @Override            protected String doInBackground() {                if (action == AppConstants.PUSH_ACTION_FRIENDS) {                    AppServer.getInstance().findUser(AppServer.getInstance().getAccountInfo().getUid(), id, 1, new OnAppRequestListener() {                        @Override                        public void onAppRequest(int code, String message, Object obj) {                            if (code == AppServer.REQUEST_SUCCESS) {                                UtilsLog.i(TAG, "findUser is ok");                                List<Friend> flist = (List<Friend>) obj;                                if (flist.size() > 0) {                                    tofriend = flist.get(0);                                    postEvent(AppEvent.HOMEFRAGMENT_REFRESH_HEAD);                                }                            }                        }                    });                } else if (action == AppConstants.PUSH_ACTION_PUBLICACCOUNT) {                    AppServer.getInstance().viewInfo(AppServer.getInstance().getAccountInfo().getUid() + "", 0 + "", id + "", 3, new OnAppRequestListener(){                        @Override                        public void onAppRequest(int code, String message, Object obj) {                            if (code == 0) {                                topublicAccount = (PublicAccount) obj;                                postEvent(AppEvent.HOMEFRAGMENT_REFRESH_PUBLIC_HEAD);                            }                        }                    });                }                return id;            }            @Override            protected void onCancelled() { }            @Override            protected void onPostExecute(String result) { }        };        UtilsLog.i(TAG, "getUpdateHeadTask is finish");        return simple;    }    public void postEvent(final int type) {        new Thread(new Runnable() {            @Override            public void run() {                EventBus.getDefault().post(new AppEvent(type));                System.out.println("PostThreadId:" + Thread.currentThread().getId());            }        }).start();    }    /**     * 获取最新的消息     *     * @param account     * @param allCount     * @param num     */    private SimpleTask<Integer> getLastPublicAccount(final PublicAccount account, final int allCount, final int num){        UtilsLog.i(TAG, "getLastPublicAccount is start");        SimpleTask<Integer> simpleTask = new SimpleTask<Integer>() {            @Override            protected Integer doInBackground() {                AppServer.getInstance().getPublicLateMessage(accountinfo.getUid(),account.getPublicid(), account.getPmtype(), new OnAppRequestListener() {                     @Override                     public void onAppRequest(int code, String message, Object obj) {                         List<MessagePublicAccount> newlist = new ArrayList<MessagePublicAccount>();                         if (code == AppServer.REQUEST_SUCCESS) {                             UtilsLog.i(TAG, "getPublicLateMessage is ok");                             newlist = (List<MessagePublicAccount>) obj;                             if (newlist!=null && newlist.size() > 0) {                                 for (int i = 0; i < newlist.size(); i++) {                                     MessagePublicAccount pa = newlist.get(i);                                     pa.setToId(AppContext.getInstance().getAccountInfo().getUid());                                     if (pa.getTypeid() > 0) {                                         try {                                             Msgtypes type = DbHelper.getDB(AppContext.getInstance()).findFirst(Msgtypes.class,WhereBuilder.b("publicid", "=", pa.getPublicid()).and("typeid", "=", pa.getTypeid()));                                             if (type!=null) {                                                 pa.setName(type.getTypename() + "");                                                 pa.setAvatar(type.getAvatar() + "");                                             }                                         } catch (DbException e) {                                             e.printStackTrace();                                         }                                     }                                     pa.setToId(accountinfo.getUid());                                     newlist.set(i, pa);                                 }                                 MessageDb db = new MessageDb();                                 try {                                     db.updatePublicAccountRecent(newlist.get(0));                                 } catch (DbException e) {                                     e.printStackTrace();                                 }                             }                         }                     }                });                return null;            }            @Override            protected void onPostExecute(Integer integer) {                if (allCount - 1 == num) {                    refresh();                }                super.onPostExecute(integer);            }        };        UtilsLog.i(TAG, "getLastPublicAccount is finish");        return simpleTask;    }    /**     * 获取任务，按照队列执行     *     * @param postion     * @return     */    private SimpleTask<Integer> getTask(final int postion) {        UtilsLog.i(TAG, "getTask is start");        Contacts contants = AppContext.getInstance().getContacts();        final List<Classe> alist = contants.getClasses();        SimpleTask<Integer> simple = new SimpleTask<Integer>() {            @Override            protected Integer doInBackground() {                AppServer.getInstance().GetParentByCid(accountinfo.getUid(), alist.get(postion).getCid(), new OnAooRequestParentListener() {                    @Override                    public void onAppRequest(int code, String message, Object obj, Object obj2) {                        if (code == 0) {                            UtilsLog.i(TAG, "GetParentByCid is ok");                            Parent[]parents = (Parent[]) obj2;                            list = new ArrayList<Parent>();                            for (int i = 0; i < parents.length; i++) {                                list.add(parents[i]);                            }                            if (list!=null && list.size()!=0) {                                for (int j = 0; j < list.size(); j++) {                                    list.get(j).setCname(alist.get(postion).getCname());                                    list.get(j).setCid(alist.get(postion).getCid());                                }                            } else {//                              list=new ArrayList<Parent>();//                              Parent parent=new Parent();//                              parent.setCname(alist.get(postion).getCname());//                              parent.setCid(alist.get(postion).getCid());//                              list.add(parent);                            }                            try {                                List<Parent>parentslist = DbHelper.getDB(AppContext.getInstance()).findAll(Parent.class);                                if (list!=null && list.size() > 0) {                                    if (parentslist!=null && parentslist.size() > 0){                                        if (list.get(0).getUid()!=parentslist.get(0).getUid()){                                            DbHelper.getDB(AppContext.getInstance()).saveAll(list);                                        }                                    } else {                                        DbHelper.getDB(AppContext.getInstance()).saveAll(list);                                    }                                }                            } catch (DbException e) {                                e.printStackTrace();                            } catch (NullPointerException e) {                                return;                            }                        } else {                            UtilsLog.i(TAG, "GetParentByCid is fail");                            list = new ArrayList<Parent>();                        }                    }                });                return postion;            }            @Override            protected void onCancelled() { }            @Override            protected void onPostExecute(Integer result) { }        };        UtilsLog.i(TAG, "getTask is finish");        return simple;    }}